import numpy as np                 #linear algebra
import pandas as pd                #data processing
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('wine_data.csv',header=Node,usecols=[0,1,2])
df.columns=['Class label','Malic acid']

df

sns.kdeplot(df['Alcohol'])

sns.kdeplot(df['Malic acid'])

color_dixt={1:'red',3:'green',2:'blue'}
sns.scatterplot(df['Alcohol'],df['Malic acid'],hue=df['Class label'],palette=color_dict)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(df.drop('Class label',axis=1),df['Class label'],test_size=0.3,random_state=0)
X_train.shape,X_test.shape

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()
scaler.fit(X_train)
X_train_scaled=scaler.transform(X_train)
X_test_scaled=scaler.transform(X_test)

X_train_scaled=pd.DataFrame(X_train_scaled,column=X_train.columns)
X_test_scaled=pd.DataFrame(X_test_scaled,columns=X_test.columns)

np.round(X_train.describe(),1)

np.round(X_train_scaled.describe(),1)

fig, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

ax1.scatter(X_train['Alcohol'],X_train['Malic acid'],c=y_train)
ax1.set_title("Before Scaling")
ax2.scatter(X_train_scaled['Alcohol'],X_train_scaled['Malic acid'],c=y_train)
ax2.set_title("After Scaling")
plt.show()


//Shape of the data will remain same,it will just get squeezed into a unit square(2D),cube(3D)

fig, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#before scaling
ax1.set_title('Before Scaling')
sns.kdeplot(X_train['Alcohol'],ax=ax1)
sns.kdeplot(X_train['Malic acid'],ax=ax1)

#after scaling
ax2.set_title('After Standard Scaling')
sns.kdeplot(X_train_scaled['Alcohol'],ax=ax2)
sns.kdeplot(X_train_scaled['Malic acid'],ax=ax2)
plt.show()




fig, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#before scaling
ax1.set_title('Alcohol Distribution before Scaling')
sns.kdeplot(X_train['Alcohol'],ax=ax1)

#after scaling
ax2.set_title('Alcohol Distribution After Standard Scaling')
sns.kdeplot(X_train_scaled['Alcohol'],ax=ax2)
plt.show()






fig, (ax1,ax2)=plt.subplots(ncols=2,figsize=(12,5))

#before scaling
ax1.set_title('Malic Acid Distribution before Scaling')
sns.kdeplot(X_train['Malic Acid'],ax=ax1)

#after scaling
ax2.set_title('Malic Acid Distribution After Standard Scaling')
sns.kdeplot(X_train_scaled['Malic Acid'],ax=ax2)
plt.show()






//Negative point:-Since we are squeezing the value between 0 and 1,so the impact of the outlier gets reduced.
